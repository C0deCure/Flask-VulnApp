from flask import render_template, request, redirect, url_for, flash, Blueprint, make_response
from sqlalchemy import text
from app.forms import LoginForm, RegisterForm
from app.models.user import User
from flask_login import current_user, login_user, logout_user

from werkzeug.security import generate_password_hash

from app import db

# Blueprint 생성
auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

# TODO : if id_incorrect happen, flash error
@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    """login"""
    form = LoginForm()
    if request.method == 'POST' and form.validate_on_submit():
        # There's absolutely no ordinary way to bypass this,
        # because password_hash generated by the generate_password function can only be verified using the check_password function.

        # payload
        # username = aaaaa' or 1=1-- , password_hash = something
        """
        user_id = db.session.execute(
            text(f"SELECT id FROM user WHERE username = '{form.username.data}' AND password_hash = '{form.password.data}'"),
        ).scalar()
        print(f"SELECT id FROM user WHERE username = '{form.username.data}' AND password_hash = '{form.password.data}'")
        print(user_id)
        if user_id:
            attempted_user = User.query.filter_by(id=user_id).first()
            login_user(attempted_user)
            flash(f'Success! You are logged in as: {attempted_user.username}', category='success')
            return redirect(url_for('main.index'))
        else:
            flash('Username and password are not match! Please try again', category='danger')
        """

        attempted_user = User.query.filter_by(username=form.username.data).first()
        if attempted_user and attempted_user.check_password(form.password.data):
            login_user(attempted_user)
            flash(f'Success! You are logged in as: {attempted_user.username}', category='success')
            return redirect(url_for('main.index'))
        else:
            flash('Username and password are not match! Please try again', category='danger')

    return render_template('login.html', title='login', form=form)


@auth_bp.route('/logout')
def logout():
    """로그아웃"""
    logout_user()
    response = make_response(redirect(url_for('main.index')))
    flash('로그아웃되었습니다.', 'success')
    return response

# TODO : register alert
@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    """회원가입"""
    form = RegisterForm()
    if request.method == 'POST' and form.validate_on_submit():
        user_to_create = User(username=form.username.data,
                              password=form.password1.data,
                              email=form.email.data)
        # user_to_create.save()
        db.session.add(user_to_create)
        db.session.commit()
        flash(f"Account created successfully! You are now logged in as {user_to_create.username}", category='success')
        return redirect(url_for('main.index'))
    if form.errors != {}: #If there are not errors from the validations
        for err_msg in form.errors.values():
            flash(f'There was an error with creating a user: {err_msg}', category='danger')

    return render_template('register.html', title='register', form=form)
